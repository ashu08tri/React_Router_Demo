{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ashu\\\\Desktop\\\\Practise\\\\NewReact\\\\MPA\\\\12-adv-starting-project\\\\frontend\\\\src\\\\Pages\\\\EventPage.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventPage() {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 6\n    }, this)\n  }, void 0, false);\n}\n_s(EventPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventPage;\nexport default EventPage;\nexport const loader = async () => {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw json({\n      message: 'Could Not Fetch Events'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"EventPage\");","map":{"version":3,"names":["useLoaderData","json","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventPage","_s","data","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","message","status","$RefreshReg$"],"sources":["C:/Users/Ashu/Desktop/Practise/NewReact/MPA/12-adv-starting-project/frontend/src/Pages/EventPage.js"],"sourcesContent":["import { useLoaderData, json } from 'react-router-dom';\r\n\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventPage() {\r\n  const data = useLoaderData();\r\n  const events = data.events;\r\n  return (\r\n    <>\r\n     <EventsList events={events} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EventPage;\r\n\r\nexport const loader = async () => {\r\n\r\n  const response = await fetch('http://localhost:8080/events');\r\n\r\nif (!response.ok) {\r\n\r\nthrow json(\r\n  {message: 'Could Not Fetch Events'},\r\n  {status: 500}\r\n  )\r\n} else {\r\nreturn response;\r\n}\r\n};\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,QAAQ,kBAAkB;AAEtD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAMC,IAAI,GAAGT,aAAa,CAAC,CAAC;EAC5B,MAAMU,MAAM,GAAGD,IAAI,CAACC,MAAM;EAC1B,oBACEN,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACCP,OAAA,CAACF,UAAU;MAACQ,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAC7B,CAAC;AAEP;AAACP,EAAA,CARQD,SAAS;EAAA,QACHP,aAAa;AAAA;AAAAgB,EAAA,GADnBT,SAAS;AAUlB,eAAeA,SAAS;AAExB,OAAO,MAAMU,MAAM,GAAG,MAAAA,CAAA,KAAY;EAEhC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE9D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAElB,MAAMnB,IAAI,CACR;MAACoB,OAAO,EAAE;IAAwB,CAAC,EACnC;MAACC,MAAM,EAAE;IAAG,CACZ,CAAC;EACH,CAAC,MAAM;IACP,OAAOJ,QAAQ;EACf;AACA,CAAC;AAAC,IAAAF,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}